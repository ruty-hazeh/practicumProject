//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class ApiClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    // login(body: LoginModel | undefined): Promise<void> {
    //     let url_ = this.baseUrl + "/api/Auth/login";
    //     url_ = url_.replace(/[?&]$/, "");

    //     const content_ = JSON.stringify(body);

    //     let options_: RequestInit = {
    //         body: content_,
    //         method: "POST",
    //         headers: {
    //             "Content-Type": "application/json",
    //         }
    //     };

    //     return this.http.fetch(url_, options_).then((_response: Response) => {
    //         return this.processLogin(_response);
    //     });
    // }

    // protected processLogin(response: Response): Promise<void> {
    //     const status = response.status;
    //     let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    //     if (status === 200) {
    //         return response.text().then((_responseText) => {
    //         return;
    //         });
    //     } else if (status !== 200 && status !== 204) {
    //         return response.text().then((_responseText) => {
    //         return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    //         });
    //     }
    //     return Promise.resolve<void>(null as any);
    // }


    // login(body: LoginModel | undefined): Promise<{ token: string }> {
    //     let url_ = this.baseUrl + "/api/Auth/login";
    //     url_ = url_.replace(/[?&]$/, "");

    //     const content_ = JSON.stringify(body);

    //     let options_: RequestInit = {
    //         body: content_,
    //         method: "POST",
    //         headers: {
    //             "Content-Type": "application/json",
    //         }
    //     };

    //     return this.http.fetch(url_, options_).then((_response: Response) => {
    //         return this.processLogin(_response);
    //     });
    // }
   
   
    async login(body: LoginModel): Promise<{ token: string }> {
        const url = `${this.baseUrl}/api/Auth/login`;
    
        const response = await fetch(url, {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify(body)
        });
    
        if (!response.ok) {
            const errorText = await response.text();
            throw new Error(`Login failed: ${errorText}`);
        }
    
        const result = await response.json();
        return result;
    }
    
    protected async processLogin(response: Response): Promise<{ token: string }> {
        const status = response.status;
        let _headers: any = {};

        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        }

        if (status === 200) {
            const _responseText = await response.text();
            return _responseText ? JSON.parse(_responseText) : { token: "" };
        } else {
            const _responseText = await response.text();
            throw new Error(`Login failed: ${_responseText}`);
        }
    }
    /**
     * @param body (optional) 
     * @return OK
     */



    async register(body: UserDTO): Promise<RegisterResponse> {
        const url = `${this.baseUrl}/api/Auth/register`;
      
        const response = await fetch(url, {
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify(body)
        });
      
        if (!response.ok) {
          const errorText = await response.text();
          throw new Error(`Registration failed: ${errorText}`);
        }
      
        const result: RegisterResponse = await response.json();
        return result;
      }
      
      // פונקציית עזר לעיבוד התגובה, גם היא מחזירה RegisterResponse
      protected async processRegister(response: Response): Promise<RegisterResponse> {
        const status = response.status;
      
        if (status === 200) {
          const responseText = await response.text();
          return responseText ? JSON.parse(responseText) : { token: "" };
        } else {
          const responseText = await response.text();
          throw new Error(`Registration failed: ${responseText}`);
        }
      }
    // register(body: UserDTO | undefined): Promise<void> {
    //     let url_ = this.baseUrl + "/api/Auth/register";
    //     url_ = url_.replace(/[?&]$/, "");

    //     const content_ = JSON.stringify(body);

    //     let options_: RequestInit = {
    //         body: content_,
    //         method: "POST",
    //         headers: {
    //             "Content-Type": "application/json",
    //         }
    //     };

    //     return this.http.fetch(url_, options_).then((_response: Response) => {
    //         return this.processRegister(_response);
    //     });
    // }

    // protected processRegister(response: Response): Promise<void> {
    //     const status = response.status;
    //     let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    //     if (status === 200) {
    //         return response.text().then((_responseText) => {
    //         return;
    //         });
    //     } else if (status !== 200 && status !== 204) {
    //         return response.text().then((_responseText) => {
    //         return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    //         });
    //     }
    //     return Promise.resolve<void>(null as any);
    // }

    // register(body: UserDTO | undefined): Promise<{ token: string }> {
    //     let url_ = this.baseUrl + "/api/Auth/register";
    //     url_ = url_.replace(/[?&]$/, "");

    //     const content_ = JSON.stringify(body);

    //     let options_: RequestInit = {
    //         body: content_,
    //         method: "POST",
    //         headers: {
    //             "Content-Type": "application/json",
    //         }
    //     };

    //     return this.http.fetch(url_, options_).then((_response: Response) => {
    //         return this.processRegister(_response);
    //     });
    // }
    // async register(body: UserDTO): Promise<{ token: string }> {
    //     const url = `${this.baseUrl}/api/Auth/register`;
    
    //     const response = await fetch(url, {
    //         method: "POST",
    //         headers: {
    //             "Content-Type": "application/json"
    //         },
    //         body: JSON.stringify(body)
    //     });
    
    //     if (!response.ok) {
    //         const errorText = await response.text();
    //         throw new Error(`Registration failed: ${errorText}`);
    //     }
    
    //     const result = await response.json();
    //     return result;
    // }
    // protected async processRegister(response: Response): Promise<{ token: string }> {
    //     const status = response.status;
    //     let _headers: any = {};

    //     if (response.headers && response.headers.forEach) {
    //         response.headers.forEach((v: any, k: any) => _headers[k] = v);
    //     }

    //     if (status === 200) {
    //         const _responseText = await response.text();
    //         return _responseText ? JSON.parse(_responseText) : { token: "" };
    //     } else {
    //         const _responseText = await response.text();
    //         throw new Error(`Registration failed: ${_responseText}`);
    //     }
    // }



    
    /**
     * @param file (optional) 
     * @return OK
     */
    upload(file: FileParameter | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/s3/upload";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (file === null || file === undefined)
            throw new Error("The parameter 'file' cannot be null.");
        else
            content_.append("file", file.data, file.fileName ? file.fileName : "file");

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpload(_response);
        });
    }

    protected processUpload(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    // download(fileName: string): Promise<void> {
    //     let url_ = this.baseUrl + "/api/s3/download/{fileName}";
    //     if (fileName === undefined || fileName === null)
    //         throw new Error("The parameter 'fileName' must be defined.");
    //     url_ = url_.replace("{fileName}", encodeURIComponent("" + fileName));
    //     url_ = url_.replace(/[?&]$/, "");

    //     let options_: RequestInit = {
    //         method: "GET",
    //         headers: {
    //         }
    //     };

    //     return this.http.fetch(url_, options_).then((_response: Response) => {
    //         return this.processDownload(_response);
    //     });
    // }

    // protected processDownload(response: Response): Promise<void> {
    //     const status = response.status;
    //     let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    //     if (status === 200) {
    //         return response.text().then((_responseText) => {
    //         return;
    //         });
    //     } else if (status !== 200 && status !== 204) {
    //         return response.text().then((_responseText) => {
    //         return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    //         });
    //     }
    //     return Promise.resolve<void>(null as any);
    // }
    downloadAndPlay(fileName: string): Promise<void> {
        let url_ = this.baseUrl + "/api/s3/download/" + encodeURIComponent(fileName);

        let options_: RequestInit = {
            method: "GET",
            headers: {}
        };

        return this.http.fetch(url_, options_)
            .then((_response: Response) => this.processDownload(_response))
            .then((blob: Blob) => {
                const url = window.URL.createObjectURL(blob);
                const audio = new Audio(url);
                audio.play();
            });
    }

    download(fileName: string): Promise<void> {
        let url_ = this.baseUrl + "/api/s3/download/" + encodeURIComponent(fileName);

        let options_: RequestInit = {
            method: "GET",
            headers: {}
        };

        return this.http.fetch(url_, options_)
            .then((_response: Response) => this.processDownload(_response))
            .then((blob: Blob) => {
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement("a");
                a.href = url;
                a.download = fileName;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                window.URL.revokeObjectURL(url);
            });
    }


    protected processDownload(response: Response): Promise<Blob> {
        const status = response.status;
        if (status === 200) {
            return response.blob(); // ⬅️ מחזיר את התוכן כקובץ בינארי
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, {});
            });
        }
        return Promise.reject("Unexpected response.");
    }
    /**
     * @return OK
     */
    delete(fileName: string): Promise<void> {
        let url_ = this.baseUrl + "/api/s3/delete/{fileName}";
        if (fileName === undefined || fileName === null)
            throw new Error("The parameter 'fileName' must be defined.");
        url_ = url_.replace("{fileName}", encodeURIComponent("" + fileName));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    files(): Promise<void> {
        let url_ = this.baseUrl + "/api/s3/files";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processFiles(_response);
        });
    }

    protected processFiles(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    singerAll(): Promise<Singer[]> {
        let url_ = this.baseUrl + "/api/Singer";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSingerAll(_response);
        });
    }

    protected processSingerAll(response: Response): Promise<Singer[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [] as any;
                    for (let item of resultData200)
                        result200!.push(Singer.fromJS(item));
                }
                else {
                    result200 = <any>null;
                }
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Singer[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    singerPOST(body: SingerDTO | undefined): Promise<Singer> {
        let url_ = this.baseUrl + "/api/Singer";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSingerPOST(_response);
        });
    }

    protected processSingerPOST(response: Response): Promise<Singer> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = Singer.fromJS(resultData200);
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Singer>(null as any);
    }

    /**
     * @return OK
     */
    // singerGET(id: number): Promise<Singer> {
    //     let url_ = this.baseUrl + "/api/Singer/{id}";
    //     if (id === undefined || id === null)
    //         throw new Error("The parameter 'id' must be defined.");
    //     url_ = url_.replace("{id}", encodeURIComponent("" + id));
    //     url_ = url_.replace(/[?&]$/, "");

    //     let options_: RequestInit = {
    //         method: "GET",
    //         headers: {
    //             "Accept": "text/plain"
    //         }
    //     };

    //     return this.http.fetch(url_, options_).then((_response: Response) => {
    //         return this.processSingerGET(_response);
    //     });
    // }

    singerGET(id: number): Promise<Singer> {
        let url_ = this.baseUrl + "/api/Singer/id/{id}"; // שים לב לשינוי בנתיב
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSingerGET(_response);
        });
    }

    protected processSingerGET(response: Response): Promise<Singer> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = Singer.fromJS(resultData200);
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Singer>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    singerPUT(id: number, body: SingerDTO | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Singer/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSingerPUT(_response);
        });
    }

    protected processSingerPUT(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    singerDELETE(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Singer/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSingerDELETE(_response);
        });
    }

    protected processSingerDELETE(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */


    // singerGET2(name: string): Promise<Singer> {
    //     if (!name || name.trim() === "")
    //         throw new Error("The parameter 'name' must be defined.");

    //     let trimmedName = name.trim(); // מסיר רווחים מיותרים

    //     let url_ = this.baseUrl + "/api/Singer/name/{name}"; // שים לב לשינוי בנתיב
    //     url_ = url_.replace("{name}", encodeURIComponent(trimmedName));
    //     url_ = url_.replace(/[?&]$/, "");

    //     let options_: RequestInit = {
    //         method: "GET",
    //         headers: {
    //             "Accept": "text/plain"
    //         }
    //     };

    //     return this.http.fetch(url_, options_).then((_response: Response) => {
    //         return this.processSingerGET2(_response);
    //     });
    // }


    // protected processSingerGET2(response: Response): Promise<Singer> {
    //     const status = response.status;
    //     let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    //     if (status === 200) {
    //         return response.text().then((_responseText) => {
    //             let result200: any = null;
    //             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
    //             result200 = Singer.fromJS(resultData200);
    //             return result200;
    //         });
    //     } else if (status !== 200 && status !== 204) {
    //         return response.text().then((_responseText) => {
    //             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    //         });
    //     }
    //     return Promise.resolve<Singer>(null as any);
    // }
    
    singerGET2(name: string): Promise<Singer> {
        if (!name || name.trim() === "") {
            throw new Error("The parameter 'name' must be defined.");
        }
    
        const trimmedName = name.trim(); // מסיר רווחים מיותרים
        let url_ = `${this.baseUrl}/api/Singer/name/${encodeURIComponent(trimmedName)}`;
    
        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json" // עדיף לשלוח/לקבל ב-JSON, לא ב-text
            }
        };
    
        return this.http.fetch(url_, options_)
            .then(response => this.processSingerGET2(response)) // עובר לעיבוד המידע
            .catch(error => {
                console.error("Error in fetching singer:", error);
                throw error;
            });
    }
    
    protected async processSingerGET2(response: Response): Promise<Singer> {
        const status = response.status;
    
        // טיפול במענה 200, 204, ושגיאות אחרות
        if (status === 200) {
            const _responseText = await response.text();
            const resultData200 = _responseText ? JSON.parse(_responseText, this.jsonParseReviver) : null;
            return Singer.fromJS(resultData200); // להמיר את המידע למודל ה-Singer
        } else if (status === 204) {
            // אם יש מצב של 204 (ללא תוכן), מחזירים null
            return null as any;
        } else {
            const errorText = await response.text();
            console.error(`Error fetching singer: ${errorText}`);
            return throwException("An unexpected server error occurred.", status, errorText, {});
        }
    }
    
    /**
     * @return OK
     */
    songAll(): Promise<Song[]> {
        let url_ = this.baseUrl + "/api/Song";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSongAll(_response);
        });
    }

    protected processSongAll(response: Response): Promise<Song[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [] as any;
                    for (let item of resultData200)
                        result200!.push(Song.fromJS(item));
                }
                else {
                    result200 = <any>null;
                }
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Song[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    songPOST(body: SongDTO | undefined): Promise<Song> {
        let url_ = this.baseUrl + "/api/Song";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSongPOST(_response);
        });
    }

    protected processSongPOST(response: Response): Promise<Song> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = Song.fromJS(resultData200);
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Song>(null as any);
    }

    /**
     * @return OK
     */
    songGET(id: number): Promise<Song> {
        let url_ = this.baseUrl + "/api/Song/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSongGET(_response);
        });
    }

    protected processSongGET(response: Response): Promise<Song> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = Song.fromJS(resultData200);
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Song>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    songPUT(id: number, body: SongDTO | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Song/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSongPUT(_response);
        });
    }

    protected processSongPUT(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    songDELETE(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Song/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSongDELETE(_response);
        });
    }

    protected processSongDELETE(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    songGET2(genre: string): Promise<Song> {
        let url_ = this.baseUrl + "/api/Song/{genre}";
        if (genre === undefined || genre === null)
            throw new Error("The parameter 'genre' must be defined.");
        url_ = url_.replace("{genre}", encodeURIComponent("" + genre));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSongGET2(_response);
        });
    }

    protected processSongGET2(response: Response): Promise<Song> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = Song.fromJS(resultData200);
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Song>(null as any);
    }

    /**
     * @return OK
     */
    byName(name: string): Promise<Song> {
        let url_ = this.baseUrl + "/api/Song/by-name/{name}";
        if (name === undefined || name === null)
            throw new Error("The parameter 'name' must be defined.");
        url_ = url_.replace("{name}", encodeURIComponent("" + name));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processByName(_response);
        });
    }

    protected processByName(response: Response): Promise<Song> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = Song.fromJS(resultData200);
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Song>(null as any);
    }

    /**
     * @return OK
     */
    userAll(): Promise<User[]> {
        let url_ = this.baseUrl + "/api/User";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUserAll(_response);
        });
    }

    protected processUserAll(response: Response): Promise<User[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [] as any;
                    for (let item of resultData200)
                        result200!.push(User.fromJS(item));
                }
                else {
                    result200 = <any>null;
                }
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<User[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    userPOST(body: UserDTO | undefined): Promise<Singer> {
        let url_ = this.baseUrl + "/api/User";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUserPOST(_response);
        });
    }

    protected processUserPOST(response: Response): Promise<Singer> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = Singer.fromJS(resultData200);
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Singer>(null as any);
    }

    /**
     * @return OK
     */
    userGET(id: number): Promise<User> {
        let url_ = this.baseUrl + "/api/User/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUserGET(_response);
        });
    }

    protected processUserGET(response: Response): Promise<User> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = User.fromJS(resultData200);
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<User>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    userPUT(id: number, body: UserDTO | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/User/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUserPUT(_response);
        });
    }

    protected processUserPUT(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    userDELETE(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/User/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUserDELETE(_response);
        });
    }

    protected processUserDELETE(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }


    // async createSongsAI(prompt: string): Promise<SongAIResponseDto[]> {
    //     const requestBody: CreateSongAIRequest = { prompt };

    //     let url_ = this.baseUrl + "/api/song/create-ai";
    //     url_ = url_.replace(/[?&]$/, "");

    
    //     const response = await fetch(url_, {
    //       method: 'POST',
    //       headers: {
    //         'Content-Type': 'application/json',
    //       },
    //       body: JSON.stringify(requestBody),
    //     });
    
    //     if (!response.ok) {
    //       throw new Error('Failed to generate songs');
    //     }
    
    //     const data = await response.json();
    //     return data as SongAIResponseDto[];
    //   }


    }
      


export class LoginModel implements ILoginModel {
    name?: string | undefined;
    password?: string | undefined;

    constructor(data?: ILoginModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): LoginModel {
        data = typeof data === 'object' ? data : {};
        let result = new LoginModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["password"] = this.password;
        return data;
    }
}

export interface ILoginModel {
    name?: string | undefined;
    password?: string | undefined;
}

export class Singer implements ISinger {
    id?: number;
    name?: string | undefined;
    songs?: Song[] | undefined;

    constructor(data?: ISinger) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            if (Array.isArray(_data["songs"])) {
                this.songs = [] as any;
                for (let item of _data["songs"])
                    this.songs!.push(Song.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Singer {
        data = typeof data === 'object' ? data : {};
        let result = new Singer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        if (Array.isArray(this.songs)) {
            data["songs"] = [];
            for (let item of this.songs)
                data["songs"].push(item.toJSON());
        }
        return data;
    }
}

export interface ISinger {
    id?: number;
    name?: string | undefined;
    songs?: Song[] | undefined;
}

export class SingerDTO implements ISingerDTO {
    name?: string | undefined;

    constructor(data?: ISingerDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): SingerDTO {
        data = typeof data === 'object' ? data : {};
        let result = new SingerDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data;
    }
}

export interface ISingerDTO {
    name?: string | undefined;
}

export class Song implements ISong {
    id?: number;
    name?: string | undefined;
    genre?: string | undefined;
    duration?: string;
    releaseDate?: Date;
    songUrl?: string | undefined;
    singerId?: number;
    singer?: Singer;
    users?: User[] | undefined;

    constructor(data?: ISong) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.genre = _data["genre"];
            this.duration = _data["duration"];
            this.releaseDate = _data["releaseDate"] ? new Date(_data["releaseDate"].toString()) : <any>undefined;
            this.songUrl = _data["songUrl"];
            this.singerId = _data["singerId"];
            this.singer = _data["singer"] ? Singer.fromJS(_data["singer"]) : <any>undefined;
            if (Array.isArray(_data["users"])) {
                this.users = [] as any;
                for (let item of _data["users"])
                    this.users!.push(User.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Song {
        data = typeof data === 'object' ? data : {};
        let result = new Song();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["genre"] = this.genre;
        data["duration"] = this.duration;
        data["releaseDate"] = this.releaseDate ? this.releaseDate.toISOString() : <any>undefined;
        data["songUrl"] = this.songUrl;
        data["singerId"] = this.singerId;
        data["singer"] = this.singer ? this.singer.toJSON() : <any>undefined;
        if (Array.isArray(this.users)) {
            data["users"] = [];
            for (let item of this.users)
                data["users"].push(item.toJSON());
        }
        return data;
    }
}

export interface ISong {
    id?: number;
    name?: string | undefined;
    genre?: string | undefined;
    duration?: string;
    releaseDate?: Date;
    songUrl?: string | undefined;
    singerId?: number;
    singer?: Singer;
    users?: User[] | undefined;
}

export class SongDTO implements ISongDTO {
    name?: string | undefined;
    genre?: string | undefined;
    duration?: string;
    releaseDate?: Date;
    songUrl?: string | undefined;
    singerId?: number;

    constructor(data?: ISongDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.genre = _data["genre"];
            this.duration = _data["duration"];
            this.releaseDate = _data["releaseDate"] ? new Date(_data["releaseDate"].toString()) : <any>undefined;
            this.songUrl = _data["songUrl"];
            this.singerId = _data["singerId"];
        }
    }

    static fromJS(data: any): SongDTO {
        data = typeof data === 'object' ? data : {};
        let result = new SongDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["genre"] = this.genre;
        data["duration"] = this.duration;
        data["releaseDate"] = this.releaseDate ? this.releaseDate.toISOString() : <any>undefined;
        data["songUrl"] = this.songUrl;
        data["singerId"] = this.singerId;
        return data;
    }
}

export interface ISongDTO {
    name?: string | undefined;
    genre?: string | undefined;
    duration?: string;
    releaseDate?: Date;
    songUrl?: string | undefined;
    singerId?: number;
}

export class User implements IUser {
    id?: number;
    name?: string | undefined;
    email?: string | undefined;
    password?: string | undefined;
    role?: string | undefined;
    songs?: Song[] | undefined;

    constructor(data?: IUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.email = _data["email"];
            this.password = _data["password"];
            this.role = _data["role"];
            if (Array.isArray(_data["songs"])) {
                this.songs = [] as any;
                for (let item of _data["songs"])
                    this.songs!.push(Song.fromJS(item));
            }
        }
    }

    static fromJS(data: any): User {
        data = typeof data === 'object' ? data : {};
        let result = new User();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["email"] = this.email;
        data["password"] = this.password;
        data["role"] = this.role;
        if (Array.isArray(this.songs)) {
            data["songs"] = [];
            for (let item of this.songs)
                data["songs"].push(item.toJSON());
        }
        return data;
    }
}

export interface IUser {
    id?: number;
    name?: string | undefined;
    email?: string | undefined;
    password?: string | undefined;
    role?: string | undefined;
    songs?: Song[] | undefined;
}

export class UserDTO implements IUserDTO {
    name?: string | undefined;
    email?: string | undefined;
    password?: string | undefined;

    constructor(data?: IUserDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.email = _data["email"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): UserDTO {
        data = typeof data === 'object' ? data : {};
        let result = new UserDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["email"] = this.email;
        data["password"] = this.password;
        return data;
    }
}

export interface IUserDTO {
    name?: string | undefined;
    email?: string | undefined;
    password?: string | undefined;
}

export interface FileParameter {
    data: any;
    fileName: string;
}

export class SwaggerException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new SwaggerException(message, status, response, headers, null);
}



// export interface SongAIResponseDto {
//     id: number;
//     name: string;
//     songUrl: string;
//     genre: string;
//     singerName: string;
//   }
  
//   export interface CreateSongAIRequest {
//     prompt: string;
//   }

export interface RegisterResponse {
    token: string;
    message?: string;
    user?: {
      id: number;
      name: string;
      email: string;
    };}